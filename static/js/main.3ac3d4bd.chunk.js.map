{"version":3,"sources":["logo.svg","serviceWorker.js","algorithm/sortingAlgorithm.js","sorting/sortingVisualiser.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","animation","quickSortAnimation","bubbleSortAnimation","selectionSortAnimation","insertionSortAnimation","color0","mergeSort","array","l","r","mid","Math","floor","startIdx1","endIdx1","startIdx2","endIdx2","i","j","temp","push","k","merge","quickSort","start","end","partitionIdx","piviot","copy","copy2","partition","bubbleSort","length","sorted","selectionSort","min","minIdx","insertionSort","hole","value","clearAnimation","defaultArray","random","defaultMergeSortArray","slice","defaultQuickSortArray","defaultBubbleSortArray","defaultSelectionSortArray","defaultInsertionSortArray","defaultmergeSortAnimation","defaultquickSortAnimation","defaultbubbleSortAnimation","defaultSelectionSortAnimation","defaultInsertionSortAnimation","count","Sorting","handleCheckedChange","e","setState","target","checked","mergeSortChecked","quickSortChecked","bubbleSortChecked","selectionSortChecked","insertionSortChecked","barsHeightFactor","arraySizeOnChange","arraySize","speedOnChange","speed","createNewArray","newArray","state","barMaxHeight","mergeSortArray","mergeSortAnimation","quickSortArray","bubbleSortArray","selectionSortArray","insertionSortArray","doSort","doMergeSort","doQuickSort","doBubbleSort","doSelectionSort","doInsertionSort","allBars","document","getElementsByClassName","setTimeout","idx","color","style","backgroundColor","newValue","height","selectAllChecked","className","id","this","type","max","onChange","onClick","name","display","map","number","key","Component","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3ac3d4bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let animation = []\nlet quickSortAnimation = []\nlet bubbleSortAnimation = []\nlet selectionSortAnimation = []\nlet insertionSortAnimation = []\n// Heap Sort\n// Counting Sort\n// Radix Sort\n// Bucket Sort\nlet color0 = 'lightskyblue'\nlet color1 = 'red'\nlet color2 = 'yellow'\nlet color3 = 'green'\n\n// -------------------------------------------- Merge Sort --------------------------------------------\nexport const mergeSort = (array, l, r) => {\n\n    let mid = Math.floor((l+r)/2)\n    if (l<r){\n        mergeSort(array, l, mid)\n        mergeSort(array, mid+1, r)\n        merge(array, l, mid, mid+1, r)\n    }\n\n    return animation\n}\n\nfunction merge(array, startIdx1, endIdx1, startIdx2, endIdx2){\n    let i = startIdx1\n    let j = startIdx2\n    let temp = []    \n\n    while(i <= endIdx1 && j <= endIdx2){\n        // Change Color when comparing\n        animation.push([1, i, color1])\n        animation.push([1, j, color1])\n        // Change color back\n        animation.push([1, i, color0])\n        animation.push([1, j, color0])\n\n        if(array[i] < array[j]){\n            temp.push(array[i])\n            i += 1\n        } else {\n            temp.push(array[j])\n            j += 1\n        }\n    }\n\n    while(i<= endIdx1){\n        // Change Color when comparing\n        animation.push([1, i, color1])\n        // Change color back\n        animation.push([1, i, color0])\n\n        temp.push(array[i])\n        i+= 1\n    }\n\n    while(j<= endIdx2){\n        // Change Color when comparing\n        animation.push([1, j, color1])\n        // Change color back\n        animation.push([1, i, color0])\n\n        temp.push(array[j])\n        j+= 1\n    }\n    let k =0\n\n    for(let i=startIdx1; i<=endIdx2; i++ ){\n        array[i] = temp[k]\n        animation.push([2, i, temp[k]])\n        k+= 1\n        animation.push([1, i, color2])\n        animation.push([1, i, color0])\n    }\n    return animation\n}\n\n// -------------------------------------------- Quick Sort --------------------------------------------\nexport const quickSort = (array, start, end) => {\n\n    if(start<end){\n        let partitionIdx = partition(array, start, end)\n        quickSort(array, start, partitionIdx-1)\n        quickSort(array, partitionIdx+1, end)\n    }\n    return quickSortAnimation\n\n}\n\n\nfunction partition(array, start, end){\n\n    let piviot = array[end]\n    quickSortAnimation.push([1, end, color1])\n    let partitionIdx = start;\n    quickSortAnimation.push([1, partitionIdx, color2])\n\n    for(let i=start; i<end; i++){\n        if(array[i]<=piviot){\n            let copy = array[i]\n            array[i] = array[partitionIdx]\n            // Highlight before change value\n            quickSortAnimation.push([1, i, color3])\n\n            array[partitionIdx] = copy\n            // Highlight before change value\n            quickSortAnimation.push([partitionIdx, i, color3])\n\n            // Change Value\n            quickSortAnimation.push([2, i, array[partitionIdx]])\n            quickSortAnimation.push([2, partitionIdx, copy])\n            // Change color back after changing value \n            quickSortAnimation.push([1, i, color0])\n            quickSortAnimation.push([partitionIdx, i, color0])\n\n            // Change piviot and partitionIdx\n            quickSortAnimation.push([1, partitionIdx, color0])\n            partitionIdx += 1\n            quickSortAnimation.push([1, partitionIdx, color2])\n\n        }\n    }\n    let copy2 = array[partitionIdx]\n    array[partitionIdx] = piviot\n    array[end] = copy2 \n\n    quickSortAnimation.push([2, partitionIdx, piviot])\n    quickSortAnimation.push([2, end, copy2])\n\n    quickSortAnimation.push([1, end, color0])\n    quickSortAnimation.push([1, partitionIdx, color0])\n\n    return partitionIdx\n\n}\n\n\n// -------------------------------------------- Bubble Sort --------------------------------------------\nexport const bubbleSort = (array) => {\n\n    for(let j=1; j<=array.length; j++){\n        let sorted = 0;\n        for(let i=0; i<=array.length-j-1; i++){\n            if(array[i] > array[i+1]){\n\n                bubbleSortAnimation.push([1, i, color1])\n                bubbleSortAnimation.push([1, i+1, color1])\n          \n                let copy = array[i]\n                let k = array[i+1]\n                array[i] = array[i+1]\n                array[i+1] = copy\n\n                bubbleSortAnimation.push([2, i, k])\n                bubbleSortAnimation.push([2, i+1, copy])\n\n                bubbleSortAnimation.push([1, i, color2])\n                bubbleSortAnimation.push([1, i+1, color2])\n\n                bubbleSortAnimation.push([1, i, color0])\n                bubbleSortAnimation.push([1, i+1, color0])\n\n                sorted = 1\n            }\n        }\n        if (sorted === 0){\n            break\n        }\n    }\n\n    return bubbleSortAnimation\n}\n\n\n// -------------------------------------------- Selection Sort --------------------------------------------\nexport const selectionSort = (array) => {\n    \n    for(let k=0; k<=array.length-1; k++) {\n        let min = 200000\n        let minIdx = 0\n        for(let i=k; i<=array.length-1; i++){\n            selectionSortAnimation.push([1, i, color1])\n            if(array[i] < min){\n                selectionSortAnimation.push([1, minIdx, color0])\n\n                min = array[i]\n                minIdx = i\n\n            }\n            selectionSortAnimation.push([1, minIdx, color2])\n            selectionSortAnimation.push([1, i, color0])\n\n        }\n        let copy = array[k]\n        array[k] = min\n        array[minIdx] = copy \n\n        selectionSortAnimation.push([1, k, color3])\n\n        selectionSortAnimation.push([2, k, min])\n        selectionSortAnimation.push([2, minIdx, copy])\n\n        selectionSortAnimation.push([1, minIdx, color0])\n        selectionSortAnimation.push([1, k, color0])\n\n    }\n  \n    return selectionSortAnimation\n}\n\n\n// -------------------------------------------- Insertion Sort --------------------------------------------\nexport const insertionSort = (array) => {\n\n    insertionSortAnimation.push([1, 0, color0])\n\n    for(let i=1; i<=array.length-1; i++){\n\n        let hole = i\n        let value = array[i]\n\n        insertionSortAnimation.push([1, i, color2])\n\n        while(value<array[hole-1] && hole > 0 ){\n\n            insertionSortAnimation.push([1, hole-1, color1])\n            \n            let copy = array[hole-1]\n            array[hole-1] = value\n            array[hole] = copy\n\n            insertionSortAnimation.push([2, hole-1, value])            \n            insertionSortAnimation.push([2, hole, copy])\n\n            insertionSortAnimation.push([1, hole-1, color0])\n\n            hole -= 1\n\n        }\n        array[hole] = value\n        insertionSortAnimation.push([2, hole, value])\n\n        insertionSortAnimation.push([1, i, color0])\n    }\n\n    for(let i=0; i<= array.length-1; i++){\n        insertionSortAnimation.push([1, i, color0])\n    }\n\n    return insertionSortAnimation\n\n}\n\n\n// -------------------------------------------- Export Functions --------------------------------------------\nexport function clearAnimation() {\n    animation = []\n    quickSortAnimation = []\n    bubbleSortAnimation = []\n    selectionSortAnimation = []\n    insertionSortAnimation = []\n}","import React, { Component } from 'react';\nimport './sortingVisualiser.css'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {mergeSort, quickSort, bubbleSort, selectionSort, insertionSort, clearAnimation} from '../algorithm/sortingAlgorithm.js'\n\nconst defaultArray = []\nlet defaultMaxHeight = 540\nfor (let i = 0; i <250; i++){       \n    defaultArray.push(Math.floor(Math.random() * defaultMaxHeight))\n}\n\nlet defaultMergeSortArray = defaultArray.slice()\nlet defaultQuickSortArray = defaultArray.slice()\nlet defaultBubbleSortArray = defaultArray.slice()\nlet defaultSelectionSortArray = defaultArray.slice()\nlet defaultInsertionSortArray = defaultArray.slice()\n\nconst defaultmergeSortAnimation = mergeSort(defaultMergeSortArray, 0, defaultMergeSortArray.length-1)\nconst defaultquickSortAnimation = quickSort(defaultQuickSortArray, 0, defaultQuickSortArray.length-1)\nconst defaultbubbleSortAnimation = bubbleSort(defaultBubbleSortArray)\nconst defaultSelectionSortAnimation = selectionSort(defaultSelectionSortArray)\nconst defaultInsertionSortAnimation = insertionSort(defaultInsertionSortArray)\n\nlet count = 1\n\n\nclass Sorting extends Component {\n\n    constructor(){\n        super()\n        this.state = {\n            array : defaultArray,\n            mergeSortAnimation: defaultmergeSortAnimation,\n            quickSortAnimation: defaultquickSortAnimation,\n            bubbleSortAnimation : defaultbubbleSortAnimation,\n            selectionSortAnimation : defaultSelectionSortAnimation,\n            insertionSortAnimation : defaultInsertionSortAnimation,\n\n            selectAllChecked : true,\n            mergeSortChecked : true,\n            quickSortChecked : true,\n            bubbleSortChecked : true,\n            selectionSortChecked : true,\n            insertionSortChecked : true,\n\n            arraySize : 250,\n            speed : 1000,\n            barMaxHeight : 540,\n            barsHeightFactor:7,\n\n        };\n\n        \n    }\n// -------------------------------------------- Handlers --------------------------------------------\n\n    // Handle checkboxes changes\n    handleCheckedChange = (e) => {\n        // Update state checked\n        this.setState({\n            [e.target.value]: e.target.checked\n        })\n\n        if (e.target.value === 'selectAllChecked') {\n            if(e.target.checked === true){\n                this.setState({\n                mergeSortChecked : true,\n                quickSortChecked : true,\n                bubbleSortChecked : true,\n                selectionSortChecked : true,\n                insertionSortChecked : true,\n                })\n                count = 5\n\n            } else {\n                this.setState({\n                    mergeSortChecked : true,\n                    quickSortChecked : false,\n                    bubbleSortChecked : false,\n                    selectionSortChecked : false,\n                    insertionSortChecked : false,\n                });\n                count = 1\n\n            }\n        } else{\n            if(e.target.checked){\n                count+=1\n            } else{\n                count -= 1\n            }\n        }\n\n        // Change height factor based on numbers of checked\n        if(count===1){\n            this.setState({barsHeightFactor:1})\n        }else if(count === 2){\n            this.setState({barsHeightFactor:2})\n        }else if(count === 3){\n            this.setState({barsHeightFactor:3.2})\n        }else if(count === 4){\n            this.setState({barsHeightFactor:4.8})\n        }else if(count === 5){\n            this.setState({barsHeightFactor:7})\n        }\n    }\n\n    // Handle slide change on array size\n    arraySizeOnChange = (e) => {\n        this.setState({arraySize: e.target.value})\n    }\n\n    // Handle slide change on speed\n    speedOnChange = (e) => {\n        this.setState({speed: e.target.value})\n    }\n\n// -------------------------------------------- Buttons --------------------------------------------\n\n    // Create New Array and get animations \n    createNewArray = () => {\n        // Ceate New Array\n        let newArray = [];\n        for (let i = 0; i <this.state.arraySize; i++){       \n            newArray.push(Math.floor(Math.random() * this.state.barMaxHeight))\n        }\n        // Update this.state.array\n        this.setState({array: newArray})\n        \n        // Clear 'animations' in sortingAlgorithm.js\n        clearAnimation()\n\n        // Merge Sort get animation with new array\n        let mergeSortArray = newArray.slice()\n        let mergeSortAnimation = mergeSort(mergeSortArray, 0, mergeSortArray.length-1)\n        this.setState({\n            mergeSortAnimation: mergeSortAnimation\n        })\n\n        // Quick Sort get animation with new array\n        let quickSortArray = newArray.slice()\n        let quickSortAnimation = quickSort(quickSortArray, 0, quickSortArray.length-1)\n        this.setState({\n            quickSortAnimation: quickSortAnimation\n        })\n\n        // Bubble Sort get animation with new array\n        let bubbleSortArray = newArray.slice()\n        let bubbleSortAnimation = bubbleSort(bubbleSortArray)\n        this.setState({\n            bubbleSortAnimation: bubbleSortAnimation\n        })\n\n        // Selection Sort get animation with new array\n        let selectionSortArray = newArray.slice()\n        let selectionSortAnimation = selectionSort(selectionSortArray)\n        this.setState({\n            selectionSortAnimation: selectionSortAnimation\n        })\n\n        // Insertion Sort get animation with new array\n        let insertionSortArray = newArray.slice()\n        let insertionSortAnimation = insertionSort(insertionSortArray)\n        this.setState({\n            insertionSortAnimation: insertionSortAnimation\n        })\n\n    }\n\n    // Start all animations when 'sort' button is hit\n    doSort = () => {\n        if(this.state.mergeSortChecked){\n            this.doMergeSort()\n        }\n        if(this.state.quickSortChecked){\n            this.doQuickSort()\n        }\n        if(this.state.bubbleSortChecked){\n            this.doBubbleSort()\n        }\n        if(this.state.selectionSortChecked){\n            this.doSelectionSort()\n        }\n        if(this.state.insertionSortChecked){\n            this.doInsertionSort()\n        }\n    }\n\n// -------------------------------------------- Algorithms --------------------------------------------\n\n    // MergeSort animation display  \n    doMergeSort = () => {\n        let mergeSortAnimation = this.state.mergeSortAnimation\n        let allBars = document.getElementsByClassName('arrayBarMergeSort')\n        let speed = (1/this.state.speed) * 1000;\n        let barsHeightFactor = this.state.barsHeightFactor\n\n        for(let i=0; i<mergeSortAnimation.length; i++){\n\n            setTimeout(()=>{\n                if(mergeSortAnimation[i][0] === 1){\n                    let idx = mergeSortAnimation[i][1]\n                    let color = mergeSortAnimation[i][2]\n                    allBars[idx].style.backgroundColor = color\n                }\n                if(mergeSortAnimation[i][0] === 2){\n                    let idx = mergeSortAnimation[i][1]\n                    let newValue = mergeSortAnimation[i][2]\n                    allBars[idx].style.height=`${newValue/barsHeightFactor}px`;\n                } \n                if(i === mergeSortAnimation.length-1){\n                    clearAnimation()\n                    this.setState({\n                        mergeSortAnimation:[]\n                    })\n                }\n            }, i* speed);\n        }\n    }\n\n    // QuickSort animation display  \n    doQuickSort = () => {\n        let quickSortAnimation = this.state.quickSortAnimation\n        let allBars = document.getElementsByClassName('arrayBarQuickSort')\n        let speed = (1/this.state.speed) * 1000;\n        let barsHeightFactor = this.state.barsHeightFactor\n       \n        for(let i=0; i<quickSortAnimation.length; i++){\n\n            setTimeout(()=>{\n                if(quickSortAnimation[i][0] === 1){\n                    let idx = quickSortAnimation[i][1]\n                    let color = quickSortAnimation[i][2]\n                    allBars[idx].style.backgroundColor = color\n                }\n                if(quickSortAnimation[i][0] === 2){\n                    let idx = quickSortAnimation[i][1]\n                    let newValue = quickSortAnimation[i][2]\n                    allBars[idx].style.height=`${newValue/barsHeightFactor}px`;\n                } \n                if(i === quickSortAnimation.length-1){\n                    clearAnimation()\n                    this.setState({\n                        quickSortAnimation:[]\n                    })\n                }\n            }, i* speed);\n        }\n    }\n\n\n    // BubbleSort animation display  \n    doBubbleSort = () => {\n        let bubbleSortAnimation = this.state.bubbleSortAnimation\n        let allBars = document.getElementsByClassName('arrayBarBubbleSort')\n        let speed = (1/this.state.speed) * 1000 *0.2;\n        let barsHeightFactor = this.state.barsHeightFactor\n       \n        for(let i=0; i<bubbleSortAnimation.length; i++){\n\n            setTimeout(()=>{\n                if(bubbleSortAnimation[i][0] === 1){\n                    let idx = bubbleSortAnimation[i][1]\n                    let color = bubbleSortAnimation[i][2]\n                    allBars[idx].style.backgroundColor = color\n                }\n                if(bubbleSortAnimation[i][0] === 2){\n                    let idx = bubbleSortAnimation[i][1]\n                    let newValue = bubbleSortAnimation[i][2]\n                    allBars[idx].style.height=`${newValue/barsHeightFactor}px`;\n                } \n                if(i === bubbleSortAnimation.length-1){\n                    clearAnimation()\n                    this.setState({\n                        bubbleSortAnimation:[]\n                    })\n                }\n            }, i* speed);\n        }\n\n    }\n\n    // SelectionSort animation display  \n    doSelectionSort = () => {\n        let selectionSortAnimation = this.state.selectionSortAnimation        \n        let allBars = document.getElementsByClassName('arrayBarSelectionSort')\n        let speed = (1/this.state.speed) * 1000 *0.2;\n        let barsHeightFactor = this.state.barsHeightFactor\n       \n        for(let i=0; i<selectionSortAnimation.length; i++){\n\n            setTimeout(()=>{\n                if(selectionSortAnimation[i][0] === 1){\n                    let idx = selectionSortAnimation[i][1]\n                    let color = selectionSortAnimation[i][2]\n                    allBars[idx].style.backgroundColor = color\n                }\n                if(selectionSortAnimation[i][0] === 2){\n                    let idx = selectionSortAnimation[i][1]\n                    let newValue = selectionSortAnimation[i][2]\n                    allBars[idx].style.height=`${newValue/barsHeightFactor}px`;\n                } \n                if(i === selectionSortAnimation.length-1){\n                    clearAnimation()\n                    this.setState({\n                        selectionSortAnimation:[]\n                    })\n                }\n            }, i* speed);\n        }\n\n    }\n\n    // Insertion animation display  \n    doInsertionSort = () => {\n        let insertionSortAnimation = this.state.insertionSortAnimation\n        let allBars = document.getElementsByClassName('arrayBarInsertionSort')\n        let speed = (1/this.state.speed) * 1000 *0.2;\n        let barsHeightFactor = this.state.barsHeightFactor\n       \n        for(let i=0; i<insertionSortAnimation.length; i++){\n\n            setTimeout(()=>{\n                if(insertionSortAnimation[i][0] === 1){\n                    let idx = insertionSortAnimation[i][1]\n                    let color = insertionSortAnimation[i][2]\n                    allBars[idx].style.backgroundColor = color\n                }\n                if(insertionSortAnimation[i][0] === 2){\n                    let idx = insertionSortAnimation[i][1]\n                    let newValue = insertionSortAnimation[i][2]\n                    allBars[idx].style.height=`${newValue/barsHeightFactor}px`;\n                }  \n                if(i === insertionSortAnimation.length-1){\n                    clearAnimation()\n                    this.setState({\n                        insertionSortAnimation:[]\n                    })\n                }\n            }, i* speed);\n        }\n\n    }\n\n// -------------------------------------------- Render --------------------------------------------\n    render() { \n\n        return (\n            \n            <div className='container-fluid main'>\n                <div className='col-md-12'>\n                    <div className='row buttons'>\n                        <div className='d-flex align-items-center mt-3'>\n\n                            <span id='arraySize' className='ml-1 mr-1'>Array size: {this.state.arraySize}</span><input type=\"range\" className='mr-3' min={10} max={250} value={this.state.arraySize} id='arraySizeBar' onChange={this.arraySizeOnChange}></input>\n                            <span id='speedValue' className='ml-1 mr-1'>Speed: {this.state.speed/1000}fps</span><input type=\"range\" className='mr-3' min={1} max={4000} value={this.state.speed} id='speed' onChange={this.speedOnChange}></input>\n\n                            <button onClick={this.createNewArray} className='btn btn-primary'>Generate New Dataset</button>\n                                         \n                        </div>\n                        <div className='d-flex checkboxes align-items-center'>\n\n                            <input \n                                className = 'mr-2 ml-2 checkbox'\n                                type='checkbox'\n                                checked={this.state.selectAllChecked}\n                                onChange={this.handleCheckedChange}\n                                name = 'selectAll'\n                                value = 'selectAllChecked' \n                            ></input><span className='mr-5'>Select All</span>\n\n                            <input \n                                className = 'mr-2 ml-2 checkbox'\n                                type='checkbox'\n                                checked={this.state.mergeSortChecked}\n                                onChange={this.handleCheckedChange}\n                                name = 'mergeSort'\n                                value = 'mergeSortChecked' \n                            ></input><span className='mr-5'>Merge Sort</span>\n                        \n                            <input \n                                className = 'mr-2 ml-2 checkbox'\n                                type='checkbox'\n                                checked={this.state.quickSortChecked}\n                                onChange={this.handleCheckedChange}\n                                name = 'quickSort'\n                                value = 'quickSortChecked'\n\n                            ></input><span className='mr-5'>Quick Sort</span>\n\n                            <input \n                                className = 'mr-2 ml-2 checkbox'\n                                type='checkbox'\n                                checked={this.state.bubbleSortChecked}\n                                onChange={this.handleCheckedChange}\n                                name = 'bubbleSort'\n                                value = 'bubbleSortChecked'\n\n                            ></input><span className='mr-5'>Bubble Sort</span>\n\n                            <input \n                                className = 'mr-2 ml-2 checkbox'\n                                type='checkbox'\n                                checked={this.state.selectionSortChecked}\n                                onChange={this.handleCheckedChange}\n                                name = 'selectionSort'\n                                value = 'selectionSortChecked'\n\n                            ></input><span className='mr-5'>Selection Sort</span>\n\n                            <input \n                                className = 'mr-2 ml-2 checkbox'\n                                type='checkbox'\n                                checked={this.state.insertionSortChecked}\n                                onChange={this.handleCheckedChange}\n                                name = 'insertionSort'\n                                value = 'insertionSortChecked'\n\n                            ></input><span className='mr-5'>Insertion Sort</span>\n\n\n                        <span><button onClick={this.doSort} className='btn btn-primary m-4'>Sort</button></span>\n\n                        </div>\n                        \n                    </div>\n                    \n{/* ---------------------------------------------------Merge Sort Bars ------------------------------------ */}\n                    <div className='row bars'\n                        style={{display: this.state.mergeSortChecked ? '' : 'none' }}\n                    >\n                        {/* <div className='col-12 d-flex justify-content-center'><h5 className='m-0 text-white bg-info justify-content-center'>Merge Sort</h5></div> */}\n                        <div className='col-12 text-white bg-info'><h5 className='m-0'>Merge Sort</h5></div>\n\n                        <div className='row'>\n                            {this.state.array.map((number,idx) => \n                                <div \n                                    className='array-bar arrayBarMergeSort'\n                                    key={idx}\n                                    style={{height: `${number/this.state.barsHeightFactor}px`}}\n                                    >         \n                                </div>\n                            )}\n                        </div>\n                    </div>\n\n{/* ---------------------------------------------------Quick Sort Bars ------------------------------------ */}\n                    <div className='row m-2 bars'\n                        style={{display: this.state.quickSortChecked ? '' : 'none' }}\n\n                    >\n                        <div className='col-12 text-white bg-info'><h5 className='m-0'>Quick Sort</h5></div>\n                        <div className='row'>\n                            {this.state.array.map((number,idx) => \n                                <div \n                                    className='array-bar arrayBarQuickSort'\n                                    key={idx}\n                                    style={{height: `${number/this.state.barsHeightFactor}px`}}\n                                    >         \n                                </div>\n                            )}\n                        </div>\n                    </div>\n\n{/* ---------------------------------------------------Bubble Sort Bars ------------------------------------ */}\n                    <div className='row m-2 bars'\n                        style={{display: this.state.bubbleSortChecked ? '' : 'none' }}\n\n                    >\n                        <div className='col-12 text-white bg-info'><h5 className='m-0'>Bubble Sort (Display Speed 5x)</h5></div>\n                        <div className='row'>\n                            {this.state.array.map((number,idx) => \n                                <div \n                                    className='array-bar arrayBarBubbleSort'\n                                    key={idx}\n                                    style={{height: `${number/this.state.barsHeightFactor}px`}}\n                                    >         \n                                </div>\n                            )}\n                        </div>\n                    </div>\n\n{/* ---------------------------------------------------Selection Sort Bars ------------------------------------ */}\n                    \n                    <div className='row m-2 bars'\n                        style={{display: this.state.selectionSortChecked ? '' : 'none' }}\n\n                    >\n                        <div className='col-12 text-white bg-info'><h5 className='m-0'>Selection Sort (Display Speed 5x)</h5></div>\n                        <div className='row'>\n                            {this.state.array.map((number,idx) => \n                                <div \n                                    className='array-bar arrayBarSelectionSort'\n                                    key={idx}\n                                    style={{height: `${number/this.state.barsHeightFactor}px`}}\n                                    >         \n                                </div>\n                            )}\n                        </div>\n                    </div>\n\n{/* ---------------------------------------------------Selection Sort Bars ------------------------------------ */}\n                    \n                    <div className='row m-2 bars'\n                        style={{display: this.state.insertionSortChecked ? '' : 'none' }}\n\n                    >\n                        <div className='col-12 text-white bg-info'><h5 className='m-0'>Insertion Sort (Display Speed 5x)</h5></div>\n                        <div className='row'>\n                            {this.state.array.map((number,idx) => \n                                <div \n                                    className='array-bar arrayBarInsertionSort'\n                                    key={idx}\n                                    style={{height: `${number/this.state.barsHeightFactor}px`}}\n                                    >         \n                                </div>\n                            )}\n                        </div>\n                    </div>\n                </div>    \n            </div>\n        );\n    }\n}\n \nexport default Sorting;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Sorting from './sorting/sortingVisualiser';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Sorting/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}